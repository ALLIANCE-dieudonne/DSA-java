Data structure: is a way to store data efficiently.
Algorithms: set of instructions
ADT(Abstract Data Type):

Queue: first in last out
Stack: last in first out

searching an element in a sorted array
>linear search
>binary search

pseudocode for linear search
----------------------------
pseudocode LinearSearch(A: is list of items,target: item to search for)
  n= length(A)
  for i from 0 to n-1
    if A[i] equals target then
      return i //index where the target is found
    end if
  end for
  return -1 // if the element is not found
end pseudocode

time complexity
for searching an element: O(n)
for reading an element: O(1)

pseudocode for binary search
----------------------------

procedure binarySearch(A: is list of items,target: item to search for)
  left = 0;
  right = n-1;

  while left <= right
     mid = (left + right) / 2
      if A[mid] = target then
        return mid // index where tha target element is found
        else if A[mid] < target
          left = mid + 1; // continue searching in the right half
        else
        right = mid -1; // continue searching in the left half
      end if
  end while

  return -1 // if the target element is not found in the list
end procedure
time complexity
searching for an element: O(log n)

Time complexity: this is the measure of run time of an algorithm increases with the increase in the number of inputs
O(1):Constant time
O(log n):Logarithmic time
O(n): Linear time
O(n log n):Linearithmic time(
O(n^2):Quadratic time
O(2^n):Exponential time
O(n!):Factorial time


--------------Quick sort and Merge sort uses the concept of divide and conquer-----------


Linked lists
------------

each element in a linked list is a node
it has a time complexity of O(n)
it is expandable
it is slow compared to array
you can't randomly access a element: you need to pass from the first element to the element you want to access

stack
-----
is an ADT: meaning it only focuses on the features it provide than the implementation
-add(push)
-delete(pop)
-find(peek)
it uses LIFO  (last in last out);
it has only one entry point

if you try to add an element to a stack implemented with a fixed value array, the
error you get is overflow error and when you try to pop an element of an empty stack the error you get is underflow error


queue
-----
it is same as stack but it uses FIFO(first in first out)
enqueue(inserting value into a queue)
dequeue(removing values from a queue)
the first index is called front and the last index is called rear

tree
----
it arranges data in tree like structure
the first node is called the root node
and the last nodes are called the leaf nodes
and the link btn nodes is called edge

depth: number of parents of a node
height: number of the children of a node

>>>Binary tree: a special type of where each node is linked to 2 nodes
-strict binary tree: every node must have 2 sub nodes
-full binary tree:  all the leaf nodes must be on the same level
-complete binary tree: binary tree where the sub nodes are in levels of l, l-1

>>Binary search tree: a type of binary tree where the large elements
to the parent node got to right and the small elements go to left as a rule.

tree traversal
-------------
-in order traversal: left-root-right
-pre order traversal:root-left-right
-post order traversal: left-right-root
